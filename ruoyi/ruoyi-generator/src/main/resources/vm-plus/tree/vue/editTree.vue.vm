<template>
  <!-- 添加或修改${functionName}对话框 -->
  <el-dialog :title="title" :visible.sync="open" width="500px" append-to-body :close-on-click-modal="false">
    <el-form ref="form" :model="form" :rules="rules" label-width="80px">
#foreach($column in $columns)
#set($field=$column.javaField)
#if($column.insert && !$column.pk)
#if(($column.usableColumn) || (!$column.superColumn))
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
#set($dictType=$column.dictType)
#if("" != $treeParentCode && $column.javaField == $treeParentCode)
      <el-form-item label="${comment}" prop="${treeParentCode}">
        <treeselect v-model="form.${treeParentCode}" :options="${businessName}Options" :normalizer="normalizer" placeholder="请选择${comment}" />
      </el-form-item>
#elseif($column.htmlType == "input")
      <el-form-item label="${comment}" prop="${field}">
        <el-input v-model="form.${field}" placeholder="请输入${comment}" />
      </el-form-item>
#elseif($column.htmlType == "imageUpload")
      <el-form-item label="${comment}">
        <imageUpload v-model="form.${field}"/>
      </el-form-item>
#elseif($column.htmlType == "fileUpload")
      <el-form-item label="${comment}">
        <fileUpload v-model="form.${field}"/>
      </el-form-item>
#elseif($column.htmlType == "editor")
      <el-form-item label="${comment}">
        <editor v-model="form.${field}" :min-height="192"/>
      </el-form-item>
#elseif($column.htmlType == "select" && "" != $dictType)
      <el-form-item label="${comment}" prop="${field}">
        <el-select v-model="form.${field}" placeholder="请选择${comment}">
          <el-option
              v-for="dict in editorconfig.${field}Options"
              :key="dict.dictValue"
              :label="dict.dictLabel"
#if($column.javaType == "Integer" || $column.javaType == "Long"):value="parseInt(dict.dictValue)"#else:value="dict.dictValue"#end

          ></el-option>
        </el-select>
      </el-form-item>
#elseif($column.htmlType == "select" && $dictType)
      <el-form-item label="${comment}" prop="${field}">
        <el-select v-model="form.${field}" placeholder="请选择${comment}">
          <el-option label="请选择字典生成" value="" />
        </el-select>
      </el-form-item>
#elseif($column.htmlType == "checkbox" && "" != $dictType)
      <el-form-item label="${comment}">
        <el-checkbox-group v-model="form.${field}">
          <el-checkbox
              v-for="dict in editorconfig.${field}Options"
              :key="dict.dictValue"
              :label="dict.dictValue">
            {{dict.dictLabel}}
          </el-checkbox>
        </el-checkbox-group>
      </el-form-item>
#elseif($column.htmlType == "checkbox" && $dictType)
      <el-form-item label="${comment}">
        <el-checkbox-group v-model="form.${field}">
          <el-checkbox>请选择字典生成</el-checkbox>
        </el-checkbox-group>
      </el-form-item>
#elseif($column.htmlType == "radio" && "" != $dictType)
      <el-form-item label="${comment}">
        <el-radio-group v-model="form.${field}">
          <el-radio
              v-for="dict in editorconfig.${field}Options"
              :key="dict.dictValue"
#if($column.javaType == "Integer" || $column.javaType == "Long"):label="parseInt(dict.dictValue)"#else:label="dict.dictValue"#end

          >{{dict.dictLabel}}</el-radio>
        </el-radio-group>
      </el-form-item>
#elseif($column.htmlType == "radio" && $dictType)
      <el-form-item label="${comment}">
        <el-radio-group v-model="form.${field}">
          <el-radio label="1">请选择字典生成</el-radio>
        </el-radio-group>
      </el-form-item>
#elseif($column.htmlType == "datetime")
      <el-form-item label="${comment}" prop="${field}">
        <el-date-picker clearable size="small"
                v-model="form.${field}"
                type="date"
                value-format="yyyy-MM-dd"
                placeholder="选择${comment}">
        </el-date-picker>
      </el-form-item>
#elseif($column.htmlType == "textarea")
      <el-form-item label="${comment}" prop="${field}">
        <el-input v-model="form.${field}" type="textarea" placeholder="请输入内容" />
      </el-form-item>
#end
#end
#end
#end
    </el-form>
    <div slot="footer" class="dialog-footer">
      <el-button type="primary" @click="submitForm">确 定</el-button>
      <el-button @click="cancel">取 消</el-button>
    </div>
  </el-dialog>
</template>

<script>
  import { list${BusinessName}, get${BusinessName}, insert${BusinessName}, update${BusinessName} } from "@/api/gridnt/${moduleName}/${businessName}";
  import Treeselect from "@riophae/vue-treeselect";
  import "@riophae/vue-treeselect/dist/vue-treeselect.css";
#foreach($column in $columns)
#if($column.insert && !$column.superColumn && !$column.pk && $column.htmlType == "imageUpload")
  import ImageUpload from '@/components/ImageUpload';
#break
#end
#end
#foreach($column in $columns)
#if($column.insert && !$column.superColumn && !$column.pk && $column.htmlType == "fileUpload")
  import FileUpload from '@/components/FileUpload';
#break
#end
#end
#foreach($column in $columns)
#if($column.insert && !$column.superColumn && !$column.pk && $column.htmlType == "editor")
  import Editor from '@/components/Editor';
#break
#end
#end

  export default {
    props: {
      editorconfig: {
        type: Object
      }
    },
    name: "${BusinessName}Editor",
    components: {
#foreach($column in $columns)
#if($column.insert && !$column.superColumn && !$column.pk && $column.htmlType == "imageUpload")
      ImageUpload,
#break
#end
#end
#foreach($column in $columns)
#if($column.insert && !$column.superColumn && !$column.pk && $column.htmlType == "fileUpload")
      FileUpload,
#break
#end
#end
#foreach($column in $columns)
#if($column.insert && !$column.superColumn && !$column.pk && $column.htmlType == "editor")
      Editor,
#break
#end
#end
      Treeselect
    },
    data() {
      return {
        // 显示搜索条件
        showSearch: true,
        // ${functionName}表格数据
          ${businessName}List: [],
        // ${functionName}树选项
          ${businessName}Options: [],
        // 弹出层标题
        title: "",
        // 是否显示弹出层
        open: false,
        // 表单参数
        form: {},
        // 表单校验
        rules: {
#foreach ($column in $columns)
#if($column.required)
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
          $column.javaField: [
            { required: true, message: "$comment不能为空", trigger:#if($column.htmlType == "select")"change"#else"blur"#end }
          ]#if($velocityCount != $columns.size()),#end
#end
#end
        }
      };
    },
    methods: {
      /** 转换${functionName}数据结构 */
      normalizer(node) {
        if (node.children && !node.children.length) {
          delete node.children;
        }
        return {
          id: node.${treeCode},
          label: node.${treeName},
          children: node.children
        };
      },
      /** 查询${functionName}下拉树结构 */
      getTreeselect() {
        list${BusinessName}({}).then(response => {
          this.${businessName}Options = [];
          const data = { ${treeCode}: 0, ${treeName}: '顶级节点', children: [] };
          data.children = this.handleTree(response.data, "${treeCode}", "${treeParentCode}");
          this.${businessName}Options.push(data);
        });
      },
#foreach ($column in $columns)
#if(${column.dictType} != '')
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
      // $comment字典翻译
      ${column.javaField}Format(row, column) {
        return this.selectDictLabel#if($column.htmlType == "checkbox")s#end(this.${column.javaField}Options, row.${column.javaField});
      },
#end
#end
      // 取消按钮
      cancel() {
        this.open = false;
        this.reset();
      },
      // 表单重置
      reset() {
        this.form = {
#foreach ($column in $columns)
#if($column.htmlType == "radio")
        $column.javaField:#if($column.javaType == "Integer" || $column.javaType == "Long")0#else"0"#end#if($velocityCount != $columns.size()),
#end
#elseif($column.htmlType == "checkbox")
        $column.javaField: []#if($velocityCount != $columns.size()),
#end
#else
        $column.javaField: null#if($velocityCount != $columns.size()),
#end
#end
#end
        };
        this.resetForm("form");
      },
      /** 新增按钮操作 */
      handleAdd(row) {
        this.reset();
        this.getTreeselect();
        if (row != null && row.${treeCode}) {
          this.form.${treeParentCode} = row.${treeCode};
        } else {
          this.form.${treeParentCode} = 0;
        }
        this.open = true;
        this.title = "添加${functionName}";
      },
      /** 修改按钮操作 */
      handleUpdate(row) {
        this.reset();
        this.getTreeselect();
        if (row != null) {
          this.form.${treeParentCode} = row.${treeCode};
        }
        get${BusinessName}(row.${pkColumn.javaField}).then(response => {
          this.form = response.data;
#foreach ($column in $columns)
#if($column.htmlType == "checkbox")
          this.form.$column.javaField = this.form.${column.javaField}.split(",");
#end
#end
          this.open = true;
          this.title = "修改${functionName}";
        });
      },
      /** 提交按钮 */
      submitForm() {
        this.#[[$]]#refs["form"].validate(valid => {
          if (valid) {
#foreach ($column in $columns)
#if($column.htmlType == "checkbox")
            this.form.$column.javaField = this.form.${column.javaField}.join(",");
#end
#end
            if (this.form.${pkColumn.javaField} != null) {
              update${BusinessName}(this.form).then(response => {
                this.msgSuccess("修改成功");
                this.open = false;
                this.$emit("reloadList")
              });
            } else {
              insert${BusinessName}(this.form).then(response => {
                this.msgSuccess("新增成功");
                this.open = false;
                this.$emit("reloadList")
              });
            }
          }
        });
      }
    }
  };
</script>
